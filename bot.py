import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from service.spam import classify_message
from service.mwt import MWT

from config import BOT_TOKEN

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("Hello!")

@dp.chat_member
async def new_chat_member(message: types.Message):
    for member in message.new_chat_members:
        await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å @{member.username}, –≤–µ–¥–∏ —Å–µ–±—è –ø—Ä–∏–ª–∏—á–Ω–æ, –Ω–µ —Å–ø–∞–º—å –∏ –Ω–µ —Ñ–ª—É–¥–∏')

@MWT(timeout=60*60)
async def get_admin_ids(chat_id):
    """ Returns a list of admin IDs for a given chat. Results are cached for 1 hour. """
    return [admin.user.id for admin in await bot.get_chat_administrators(chat_id)]

@dp.message()
async def normal_message(message: types.Message):
    admin_ids = await get_admin_ids(message.chat.id)
    is_privileged = message.from_user.id in admin_ids or message.from_user.is_bot
    if is_privileged:
        print("üõë Privileged user skipped")
        return
    result = await classify_message(message.text)
    if result:
        print(f"‚ùå Spam recognized: {message.text}")
        await message.delete()
        await kick_chat_member(message.chat.id, message.from_user.id)
        print(f"UID {message.from_user.id} kicked")


async def kick_chat_member(chat_id, user_id):
    await bot.ban_chat_member(chat_id, user_id)
    await bot.unban_chat_member(chat_id, user_id)


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
